{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.0", "generated_at": "2024-01-29T09:38:58.819118Z", "invocation_id": "83ddf48b-217d-490f-b193-50db2f1543e1", "env": {}, "project_name": "shared_dbt_projects", "project_id": "78c35699a35964b32b0c88c2ed05ff80", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.shared_dbt_projects.tflex_usage": {"database": "eio_ingest", "schema": "usage_transform", "name": "tflex_usage", "resource_type": "model", "package_name": "shared_dbt_projects", "path": "transform/tflex_usage.sql", "original_file_path": "models/transform/tflex_usage.sql", "unique_id": "model.shared_dbt_projects.tflex_usage", "fqn": ["shared_dbt_projects", "transform", "tflex_usage"], "alias": "tflex_usage", "checksum": {"name": "sha256", "checksum": "f844b089d5cf40e4a9a4da9364c99badc3ccb1bdc731ee482216d460cc320962"}, "config": {"enabled": true, "alias": "tflex_usage", "schema": "usage_transform", "database": "eio_ingest", "tags": ["tflex_usage_transform", "pre_publish_models"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["tflex_usage_transform", "pre_publish_models"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "materialized": "ephemeral", "database": "eio_ingest", "schema": "usage_transform", "alias": "tflex_usage", "tags": ["tflex_usage_transform", "pre_publish_models"]}, "created_at": 1700732168.732555, "relation_name": null, "raw_code": "/*\n    -- materialized='ephemeral' transforms this to a CTE that can be referred to by other nodes in the model\n*/\n\n{{ \n    config(\n        alias='tflex_usage',\n        tags=['tflex_usage_transform','pre_publish_models'],\n        materialized='ephemeral'\n    )\n}}\n\n\n--Import CTE's\nWITH tflex_accounts AS (\n    SELECT *\n    FROM {{ source('purchase_shared', 'eba_contracts')}}\n    WHERE 1=1\n        AND agreement_type = 'Purchasing & Services Agreement'\n        AND agreement_status IN ('Active','Terminated/Expired')\n        AND exhibit_type = 'Token-Flex'\n),\n\nt_eccr_agg_product_usage_dd AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_eccr_agg_product_usage_dd') }}\n),\n\nt_eccr_agg_product_usage_dd_expired AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_eccr_agg_product_usage_dd_expired') }}\n),\n\nt_eccr_token_adjustments AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_eccr_token_adjustments') }}\n),\n\nt_eccr_product_line AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_eccr_product_line') }}\n),\n\nt_pseb_product_feature AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_pseb_product_feature') }}\n),\n\nt_eccr_service_nm AS (\n    SELECT *\n    FROM {{ source('token_flex_core_public','t_eccr_service_nm') }}\n),\n\nflexera_core_flexdetails AS (\n    SELECT *\n    FROM {{ source('sales_data_hub_optimized','flexera_core_flexdetails') }}\n),\n\nflex_usage AS (\n    SELECT *\n    FROM {{ source('sales_data_hub_optimized','flex_usage') }}\n),\n\nflexera_core_token_adjustment AS (\n    SELECT *\n    FROM {{ source('sales_data_hub_optimized','flexera_core_token_adjustment') }}\n),\n\n-- Transform CTE's\neccr_tokens AS (\n    -- TFLEX CORE/NLRS/NLRM Usage Table maintained by the EBSO/CORE Team\n    SELECT ud.end_customer_agreement_id\n        , ud.agree_nbr\n        , ud.user_login_id\n        , CASE\n            WHEN ud.txn_type_nm IN ('CLOUD_CONSUMPTION','CLOUD_PRODUCT_CONSUMPTION') \n                THEN NULL\n            WHEN ud.txn_type_nm = 'PRODUCT_CONSUMPTION' \n                THEN ud.machine_nm\n            ELSE 'UNKNOWN'\n            END                                AS machine_nm\n        , CASE\n            WHEN ud.txn_type_nm IN ('CLOUD_CONSUMPTION','CLOUD_PRODUCT_CONSUMPTION') \n                THEN 'Cloud'\n            WHEN ud.txn_type_nm = 'PRODUCT_CONSUMPTION' \n                THEN ud.license_server_nm\n            ELSE 'UNKNOWN'\n            END                                AS license_server_nm\n        , DATE(ud.usage_dt)                    AS usage_dt\n        , ud.usage_date_key\n        , ud.product_line_cd\n        , ud.product_feature_id\n        , ud.service_category_nm\n        , ud.txn_type_nm\n        , CASE\n            WHEN ud.txn_type_nm = 'CLOUD_CONSUMPTION' THEN '1' \n            WHEN ud.txn_type_nm = 'CLOUD_PRODUCT_CONSUMPTION' THEN '2'\n            WHEN ud.txn_type_nm = 'PRODUCT_CONSUMPTION' THEN '5' \n            ELSE '0'\n            END                                AS txn_type_id\n        , ud.end_customer_agreement_yr_ind\n        , NULL AS multi_year_flg\n        , ud.txn_units_nbr\n        , ud.duration_mns\n        , ud.duration_mns / 60              AS duration_hrs\n        -- Placeholder fields for adjustments details\n        , NULL                              AS charged_item_id\n        , NULL                              AS src_created_dt\n        , NULL                              AS txn_dt\n        , NULL                              AS txn_qty\n        , ud.reason_cd\n        , NULL                              AS reason_txt\n    FROM t_eccr_agg_product_usage_dd ud\n    WHERE ud.txn_type_nm  IN ('CLOUD_CONSUMPTION', 'CLOUD_PRODUCT_CONSUMPTION',\n            'PRODUCT_CONSUMPTION')\n    \n    UNION ALL\n\n    -- Union the TFLEX CORE/NLRS Usage Table maintained by the EBSO/CORE Team\n    -- for old expired agreements\n    SELECT udex.end_customer_agreement_id\n            , udex.agree_nbr\n            , udex.user_login_id\n            , CASE\n                WHEN udex.txn_type_nm IN ('CLOUD_CONSUMPTION','CLOUD_PRODUCT_CONSUMPTION') \n                    THEN NULL\n                WHEN udex.txn_type_nm IN ('MANUAL_ADJUSTMENT','MANUAL_CONSUMPTION') \n                    THEN NULL\n                WHEN udex.txn_type_nm = 'PRODUCT_CONSUMPTION' \n                    THEN udex.machine_nm\n                ELSE 'UNKNOWN'\n             END                                    AS machine_nm\n            , CASE\n                WHEN udex.txn_type_nm IN ('CLOUD_CONSUMPTION','CLOUD_PRODUCT_CONSUMPTION') \n                    THEN 'Cloud'\n                WHEN udex.txn_type_nm IN ('MANUAL_ADJUSTMENT','MANUAL_CONSUMPTION') \n                    THEN 'Token Adjustment'\n                WHEN udex.txn_type_nm = 'PRODUCT_CONSUMPTION' \n                    THEN udex.license_server_nm\n                ELSE 'UNKNOWN'\n             END                                    AS license_server_nm\n            , DATE(udex.usage_dt)                   AS usage_dt\n            , udex.usage_date_key\n            , udex.product_line_cd\n            , udex.product_feature_id\n            , udex.service_category_nm\n            , udex.txn_type_nm\n            , CASE\n                WHEN udex.txn_type_nm = 'CLOUD_CONSUMPTION' THEN '1' \n                WHEN udex.txn_type_nm = 'CLOUD_PRODUCT_CONSUMPTION' THEN '2'\n                WHEN udex.txn_type_nm = 'MANUAL_ADJUSTMENT' THEN '3'\n                WHEN udex.txn_type_nm = 'MANUAL_CONSUMPTION' THEN '4'\n                WHEN udex.txn_type_nm = 'PRODUCT_CONSUMPTION' THEN '5'\n                ELSE '0' \n             END                                    AS txn_type_id\n            , udex.end_customer_agreement_yr_ind\n            , NULL   AS multi_year_flg\n            , udex.txn_units_nbr\n            , udex.duration_mns\n            , udex.duration_mns / 60                AS duration_hrs\n            -- Placeholder fields for adjustments details\n            , NULL                                  AS charged_item_id\n            , NULL                                  AS src_created_dt\n            , NULL                                  AS txn_dt\n            , NULL                                  AS txn_qty\n            , udex.reason_cd\n            , NULL                                  AS reason_txt\n    FROM t_eccr_agg_product_usage_dd_expired udex\n\n    UNION ALL\n\n    -- Union the TFLEX CORE/NLRS Adjustments Table maintained by the EBSO/CORE Team\n    -- only for agreements in T_ECCR_AGG_PRODUCT_USAGE_DD table\n    SELECT ta.end_customer_agreement_id\n            , ta.agree_nbr\n            , NULL                                  AS user_login_id\n            , NULL                                  AS machine_nm\n            , 'Token Adjustment'                    AS license_server_nm\n            , DATE(ta.usage_dt)                     AS usage_dt\n            , ta.usage_date_key\n            , ta.product_line_cd\n            , NULL                                  AS product_feature_id\n            , ta.service_category_nm\n            , ta.txn_type_nm\n            , CASE\n                WHEN ta.txn_type_nm = 'MANUAL_ADJUSTMENT' THEN '3' \n                WHEN ta.txn_type_nm = 'MANUAL_CONSUMPTION' THEN '4'\n                ELSE '0'\n             END                                AS txn_type_id\n            , ta.end_customer_agreement_yr_ind\n            , ta.multi_year_flg\n            , ta.txn_units_nbr\n            , NULL                              AS duration_mns\n            , NULL                              AS duration_hrs\n            -- Adjustments details\n            , ta.charged_item_id\n            , ta.src_created_dt\n            , ta.txn_dt\n            , ta.txn_qty\n            , ta.reason_cd\n            , ta.reason_txt\n    FROM t_eccr_token_adjustments ta\n),\n\nflexera_tokens AS (\n    -- Flexera Usage Table maintained by the EEP DAR Team\n    SELECT fu.flexdetailid\n        , fu.username                                   AS user_login_id\n        , fu.user_hostname                              AS machine_nm\n        , fu.user_project                               AS license_server_nm\n        , DATE(fu.DATE_STR)                             AS usage_dt\n        , TO_CHAR(DATE(fu.date_str),'YYYYMMDD')         AS usage_date_key\n        , fu.productlinecode                            AS product_line_cd\n        , fu.feature                                    AS product_feature_cd\n        , NULL                                          AS service_mktg_nm\n        , NULL                                          AS service_category_nm\n        , 'PRODUCT_CONSUMPTION'                         AS txn_type_nm\n        , '5'                                           AS txn_type_id\n        , REPLACE(contractyear, 'Year ')                AS end_customer_agreement_yr_ind\n        , NULL                                          AS multi_year_flg\n        , CAST(fu.token_consumed AS DECIMAL)            AS txn_units_nbr\n        , CAST(fu.hours_used AS DECIMAL)  * 60          AS duration_mns\n        , CAST(fu.hours_used AS DECIMAL)                AS duration_hrs\n        , NULL                                          AS charged_item_id\n        , NULL                                          AS src_created_dt\n        , NULL                                          AS txn_dt\n        , NULL                                          AS txn_qty\n        , NULL                                          AS reason_cd\n        , NULL                                          AS reason_txt\n    FROM flex_usage fu\n\n    UNION ALL\n\n    -- Flexera Adjustments Table maintained by the EEP DAR Team\n    SELECT fa.flexdetailid\n        , NULL                                          AS user_login_id\n        , NULL                                          AS machine_nm\n        , 'Token Adjustment'                            AS license_server_nm\n        , DATE(fa.adjustment_date)                      AS usage_dt\n        , TO_CHAR(DATE(fa.adjustment_date),'YYYYMMDD')  AS usage_date_key\n        , fa.product_line_code                          AS product_line_cd\n        , NULL                                          AS product_feature_cd\n        , NULL                                          AS service_mktg_nm\n        , NULL                                          AS service_category_nm\n        , CASE \n            WHEN \n                reason = 'Off network'  THEN 'MANUAL_CONSUMPTION'\n            ELSE 'MANUAL_ADJUSTMENT'\n            END                                         AS txn_type_nm\n        , CASE \n            WHEN \n                reason = 'Off network'  THEN '4'\n            ELSE '3'\n            END                                         AS txn_type_id\n        , REPLACE(adjcontractyear, 'Year ')             AS end_customer_agreement_yr_ind\n        , NULL                                          AS multi_year_flg\n        , CASE WHEN (DATE(fa.adjustment_date) >= DATE'2022-12-01') \n                    AND (fa.tokens_adjusted IS NULL) \n            THEN CAST(fa.use_count AS DECIMAL) \n            ELSE CAST(fa.tokens_adjusted AS DECIMAL) \n        END                                             AS txn_units_nbr\n        , NULL                                          AS duration_mns\n        , NULL                                          AS duration_hrs\n        , NULL                                          AS charged_item_id\n        , NULL                                          AS src_created_dt\n        , NULL                                          AS txn_dt\n        , fa.use_count                                  AS txn_qty\n        , fa.reason                                     AS reason_cd\n        , fa.adjustment_comments                        AS reason_txt\n    FROM flexera_core_token_adjustment fa\n),\n\n-- Final CTE\ntflex_usage AS (\n    -- Consolidated CORE (NLRS/NLRM) tokens\n    SELECT a.ultimate_parent_account_id\n        , a.ultimate_parent_account_csn\n        , a.ultimate_parent_account_name\n        , a.ultimate_parent_eca_id\n        , a.ultimate_parent_eca_name\n        , a.account_id\n        , a.account_name\n        , a.account_csn\n        , a.parent_account_id\n        , a.parent_account_csn\n        , a.parent_account_name\n        , a.agreement_id\n        , a.agreement_name\n        , a.agreement_status\n        , a.agreement_type\n        , a.exhibit_id\n        , a.exhibit_name\n        , a.exhibit_active_status\n        , a.exhibit_start_date\n        , a.exhibit_end_date\n        , a.exhibit_type\n        , a.tflex_reporting_platform\n        , et.agree_nbr                          AS agreement_number\n        , a.eba_analytics_id_key\n        , a.eba_analytics_name_key\n        ------------------------------------------------------------------------------\n        -- Tflex User Data\n        , et.user_login_id\n        , et.machine_nm                         AS machine_name\n        , et.license_server_nm                  AS license_server_name\n        -- Tflex Usage Dates\n        , et.usage_dt\n        , et.usage_date_key\n        -- Token Flex Product Data\n        , et.product_line_cd\n        , pl.product_line_nm                    AS product_line_name\n        -- Token Flex Product Feature (Version) Data\n        , et.product_feature_id\n        , pf.product_feature_cd\n        , pf.product_release_cd\n        -- Token Flex Service Data\n        , sn.service_mktg_nm                    AS service_mktg_name\n        -- Unified Product Name - Product name for Desktop and Cloud Products, Manual Consumption\n        -- Service Name for Cloud Services\n        -- Token Adjustment for Manual Adjustments\n        , CASE\n            WHEN et.txn_type_nm = 'CLOUD_CONSUMPTION'\n                THEN sn.service_mktg_nm\n            WHEN et.txn_type_nm IN ('MANUAL_CONSUMPTION', 'PRODUCT_CONSUMPTION',\n                                    'CLOUD_PRODUCT_CONSUMPTION')\n                THEN pl.product_line_nm\n            WHEN et.txn_type_nm = 'MANUAL_ADJUSTMENT'\n                THEN 'Token Adjustment'\n            ELSE 'UNKNOWN'\n        END                                     AS product_name\n        , CASE\n            WHEN et.txn_type_nm = 'PRODUCT_CONSUMPTION'\n                THEN CONCAT(pl.product_line_nm, ' ', pf.product_release_cd)\n            WHEN et.txn_type_nm IN ('MANUAL_CONSUMPTION', 'CLOUD_PRODUCT_CONSUMPTION')\n                THEN pl.product_line_nm\n            WHEN et.txn_type_nm = 'CLOUD_CONSUMPTION'\n                THEN sn.service_mktg_nm\n            WHEN et.txn_type_nm = 'MANUAL_ADJUSTMENT'\n                THEN 'Token Adjustment'\n        END                                     AS product_version\n        -- Additional Information on Usage\n        , et.service_category_nm                AS service_category_name\n        , et.txn_type_nm                        AS txn_type_name\n        , et.txn_type_id\n        , et.end_customer_agreement_yr_ind\n        , et.multi_year_flg\n        -- Tokens, Usage Time\n        , et.txn_units_nbr\n        , et.duration_mns\n        , et.duration_hrs\n        -- Token Flex Adjustments Information\n        , et.charged_item_id\n        , et.src_created_dt\n        , et.txn_dt\n        , et.txn_qty\n        , et.reason_cd\n        , CASE\n            WHEN et.agree_nbr IN\n                    ('110003302315', '110003300867', '110003300867',\n                    '110003294491', '110003423141', '110003288214',\n                    '110003830762', '110003085408', '110003139969',\n                    '110003299464', '110002894181', '110003660879',\n                    '110002834422', '110003288000', '110003186675',\n                    '110003846659', '110003839864', '110003606361',\n                    '110002875917', '110002782463', '110003245612',\n                    '110003327117', '110003369305', '110003353110',\n                    '110003839864', '110003839864', '110003359366',\n                    '110003410981', '110003402697', '110003830762',\n                    '110003858891', '110003369900', '110003286836',\n                    '110003830256', '110003843244', '110003329241',\n                    '110002958388', '110003395756', '110003835136',\n                    '110003655442', '110002944413', '110003748810',\n                    '110003827242', '110003771976', '110003273863',\n                    '110003666005', '110003187252', '110003757376',\n                    '110003830256', '110003158257', '110003375564',\n                    '110003300867', '110003761092', '110002903454',\n                    '110002890135', '110003300867', '110003060706',\n                    '110003050045', '110003724075', '110003769256',\n                    '110003028033', '110003336464', '110003372952',\n                    '110002854263', '110003301539', '110003072025') \n                AND TRUNC(usage_dt, 'MONTH') = DATE '2022-01-01'\n                AND txn_type_nm = 'MANUAL_ADJUSTMENT'\n                THEN 'BIM 360 Enterprise Unlimited'\n            ELSE et.reason_txt\n          END                                   AS reason_txt\n    FROM tflex_accounts a -- Token Flex Account and Agreement Data\n            -- Join the ECCR tokens created in above CTE's\n            INNER JOIN eccr_tokens et\n                        ON (a.agreement_id = et.end_customer_agreement_id)\n                            AND (a.exhibit_start_date <= DATE(et.usage_dt))\n                            AND (a.exhibit_end_date >= DATE(et.usage_dt))\n\n        -- Join the TFLEX Product Line Table maintained by the EBSO/CORE Team\n            LEFT JOIN t_eccr_product_line pl\n                    ON (et.product_line_cd = pl.product_line_cd)\n\n        -- Join the Token Flex Product Feature (Version) Table maintained by the EBSO/CORE Team\n            LEFT JOIN t_pseb_product_feature pf\n                    ON (et.product_feature_id = TO_CHAR(pf.product_feature_id))\n\n        -- Join the Token Flex Service Table maintained by the EBSO/CORE Team\n            LEFT JOIN t_eccr_service_nm sn\n                    ON (et.product_feature_id = sn.service_cd)\n    WHERE 1 = 1\n    AND a.tflex_reporting_platform IN ('NLRS', 'NLRM')\n\n    UNION ALL\n\n    -- Union with consolidated Flexera tokens\n    SELECT a.ultimate_parent_account_id\n        , a.ultimate_parent_account_csn\n        , a.ultimate_parent_account_name\n        , a.ultimate_parent_eca_id\n        , a.ultimate_parent_eca_name\n        , a.account_id\n        , a.account_name\n        , a.account_csn\n        , a.parent_account_id\n        , a.parent_account_csn\n        , a.parent_account_name\n        , a.agreement_id\n        , a.agreement_name\n        , a.agreement_status\n        , a.agreement_type\n        , a.exhibit_id\n        , a.exhibit_name\n        , a.exhibit_active_status\n        , a.exhibit_start_date\n        , a.exhibit_end_date\n        , a.exhibit_type\n        , a.tflex_reporting_platform\n        , NULL                           AS agreement_number\n        , a.eba_analytics_id_key\n        , a.eba_analytics_name_key\n        ------------------------------------------------------------------------------\n        -- Flexera User Data\n        -- Business Rule - use Machine Name as USer Login ID for three products:\n        -- Arnold, VRED Render and VRED CORE\n        , CASE\n            WHEN ft.product_line_cd IN ('RCMVRD', 'ARNOL', 'VRDSRV')\n                THEN ft.machine_nm\n            ELSE ft.user_login_id\n        END                                 AS user_login_id\n        , ft.machine_nm                     AS machine_name\n        , ft.license_server_nm\n        -- Flexera Usage Dates\n        , ft.usage_dt\n        , ft.usage_date_key\n        -- Token Flex Product Data\n        , ft.product_line_cd\n        , pl.product_line_nm                AS product_line_name\n        -- Token Flex Product Feature (Version) Data\n        , TO_CHAR(pf.product_feature_id)    AS product_feature_id\n        , ft.product_feature_cd\n        , pf.product_release_cd             AS product_release_cd\n        -- Token Flex Service Data\n        , ft.service_mktg_nm                AS service_mktg_name\n        -- Unified Product Name - Product name for Desktop and Cloud Products\n        -- Service Name for Cloud Services\n        -- Token Adjustment for Manual Adjustments\n        , CASE\n            WHEN ft.txn_type_nm IN ('MANUAL_CONSUMPTION', 'PRODUCT_CONSUMPTION')\n                THEN pl.product_line_nm\n            WHEN ft.txn_type_nm = 'MANUAL_ADJUSTMENT'\n                THEN 'Token Adjustment'\n            ELSE 'UNKNOWN'\n        END                                 AS product_name\n        , CASE\n            WHEN txn_type_nm = 'PRODUCT_CONSUMPTION'\n                THEN CONCAT(pl.product_line_nm, ' ', pf.product_release_cd)\n            WHEN txn_type_nm = 'MANUAL_CONSUMPTION'\n                THEN pl.product_line_nm\n            WHEN ft.txn_type_nm = 'MANUAL_ADJUSTMENT'\n                THEN 'Token Adjustment'\n        END                                 AS product_version\n        -- Additional Information on Usage\n        , ft.service_category_nm            AS service_category_name\n        , ft.txn_type_nm                    AS txn_type_name\n        , ft.txn_type_id\n        , ft.end_customer_agreement_yr_ind\n        , ft.multi_year_flg\n        -- Tokens, Usage Time\n        , ft.txn_units_nbr\n        , ft.duration_mns\n        , ft.duration_hrs\n        -- Token Flex Adjustments Information\n        , ft.charged_item_id\n        , ft.src_created_dt\n        , ft.txn_dt\n        , ft.txn_qty\n        , ft.reason_cd\n        , ft.reason_txt\n    FROM tflex_accounts a -- Token Flex Account and Agreement Data\n            -- Join the Flexera Details Table maintained by the EEP DAR Team\n            INNER JOIN flexera_core_flexdetails fd\n                        ON (a.agreement_id = fd.end_customer_contract_id)\n                            AND (a.exhibit_start_date =\n                                COALESCE(TRY_TO_DATE(fd.contract_exhibit_start_date), DATE('1970-01- 01')))\n                            AND (a.exhibit_end_date = \n                                COALESCE(TRY_TO_DATE(fd.contract_exhibit_end_date), DATE('1970-01- 01')))\n\n        -- Join the Flexera tokens created in above CTE's\n            INNER JOIN flexera_tokens ft\n                        ON (fd.flexdetailid = ft.flexdetailid)\n                            AND (TRY_TO_DATE(fd.contract_exhibit_start_date) <= DATE(ft.usage_dt))\n                            AND (TRY_TO_DATE(fd.contract_exhibit_end_date) >= DATE(ft.usage_dt))\n\n        -- Join the TFLEX Product Line Table maintained by the EBSO/CORE Team\n            LEFT JOIN t_eccr_product_line pl\n                    ON (ft.product_line_cd = pl.product_line_cd)\n\n        -- Join the Token Flex Product Feature (Version) Table maintained by the EBSO/CORE Team\n            LEFT JOIN t_pseb_product_feature pf\n                    ON (ft.product_feature_cd = pf.product_feature_cd)\n    WHERE 1 = 1\n    AND a.tflex_reporting_platform = 'Flexera'\n)\n\nSELECT *\nFROM tflex_usage", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_service_nm"], ["sales_data_hub_optimized", "flexera_core_flexdetails"], ["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"], ["token_flex_core_public", "t_pseb_product_feature"], ["sales_data_hub_optimized", "flex_usage"], ["purchase_shared", "eba_contracts"], ["token_flex_core_public", "t_eccr_product_line"], ["token_flex_core_public", "t_eccr_token_adjustments"], ["sales_data_hub_optimized", "flexera_core_token_adjustment"], ["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm", "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails", "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired", "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature", "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage", "source.shared_dbt_projects.purchase_shared.eba_contracts", "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line", "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments", "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment", "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.shared_dbt_projects.my_python_model": {"database": "eio_ingest", "schema": "usage_transform", "name": "my_python_model", "resource_type": "model", "package_name": "shared_dbt_projects", "path": "transform/my_python_model.py", "original_file_path": "models/transform/my_python_model.py", "unique_id": "model.shared_dbt_projects.my_python_model", "fqn": ["shared_dbt_projects", "transform", "my_python_model"], "alias": "my_python_model", "checksum": {"name": "sha256", "checksum": "c23fe765ddcaf55c53c552b97050c279b26760c22760ef384bdba59f84e70c49"}, "config": {"enabled": true, "alias": null, "schema": "usage_transform", "database": "eio_ingest", "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "materialized": "table", "database": "eio_ingest", "schema": "usage_transform"}, "created_at": 1700732169.494962, "relation_name": "eio_ingest.usage_transform.my_python_model", "raw_code": "import snowflake.snowpark.functions as F\n\ndef add_one(x):\n    return x + 1\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n    temps_df = dbt.ref(\"tflex_usage\")\n\n    # warm things up just a little\n    df = temps_df\n    return df", "language": "python", "refs": [{"name": "tflex_usage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.shared_dbt_projects.tflex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.shared_dbt_projects.metrics_source_freshness_test": {"database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "metrics_source_freshness_test", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "metrics_source_freshness_test.sql", "original_file_path": "tests/metrics_source_freshness_test.sql", "unique_id": "test.shared_dbt_projects.metrics_source_freshness_test", "fqn": ["shared_dbt_projects", "metrics_source_freshness_test"], "alias": "metrics_source_freshness_test", "checksum": {"name": "sha256", "checksum": "9c385f7b2abf41cf455da27a0e8782d1e92ce21f980ef5a2bd18ea8f27075b91"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1700732171.2089758, "relation_name": null, "raw_code": "{{ config(severity = 'warn') }}\n\n{{source_table_freshness()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.shared_dbt_projects.source_table_freshness"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_unique_product_code.6a87bd9513": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('tflex_product_list_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_product_list_transform_unique_product_code", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_product_list_transform_unique_product_code.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_unique_product_code.6a87bd9513", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_product_list_transform_unique_product_code"], "alias": "usage_tflex_tflex_product_list_transform_unique_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.197567, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_product_list_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.tflex_product_list_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_not_null_product_code.b671cdaced": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('tflex_product_list_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_product_list_transform_not_null_product_code", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_product_list_transform_not_null_product_code.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_not_null_product_code.b671cdaced", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_product_list_transform_not_null_product_code"], "alias": "usage_tflex_tflex_product_list_transform_not_null_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.366358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_product_list_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.tflex_product_list_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id.3cb4b51c7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ultimate_parent_eca_id", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id.3cb4b51c7a", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.368223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ultimate_parent_eca_id", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name.206cd29ca4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ultimate_parent_eca_name", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name.206cd29ca4", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.4014258, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ultimate_parent_eca_name", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_account_name.44457d8091": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_name", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_account_name", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_account_name.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_account_name.44457d8091", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_account_name"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_account_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.42482, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_name", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_agreement_id.efafc2ce17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "agreement_id", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_agreement_id.efafc2ce17", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_agreement_id"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.427577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agreement_id", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id.840c1daa8a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "exhibit_id", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id.840c1daa8a", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.453453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_id", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status.b2220c929e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "exhibit_active_status", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status.b2220c929e", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.468556, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_active_status", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date.2344dbd8a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "exhibit_start_date", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date.2344dbd8a2", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.5198479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_start_date", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date.c130a00be6": {"test_metadata": {"name": "validate_date_format", "kwargs": {"column_name": "exhibit_start_date", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date.c130a00be6", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date"], "alias": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.5638258, "relation_name": null, "raw_code": "{{ test_validate_date_format(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_start_date", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date.2825c88eda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "exhibit_end_date", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date.2825c88eda", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.6349661, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_end_date", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date.ae97a13d37": {"test_metadata": {"name": "validate_date_format", "kwargs": {"column_name": "exhibit_end_date", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date.ae97a13d37", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date"], "alias": "usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.641568, "relation_name": null, "raw_code": "{{ test_validate_date_format(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "exhibit_end_date", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform.d2ce6e2f3b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tflex_reporting_platform", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform.d2ce6e2f3b", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.652639, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tflex_reporting_platform", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform.ceff1dd3f4": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["NLRS", "NLRM", "Flexera"], "column_name": "tflex_reporting_platform", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform.ceff1dd3f4", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform"], "alias": "usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.653367, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tflex_reporting_platform", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key.49adc34490": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eba_analytics_id_key", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key.49adc34490", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.6575081, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "eba_analytics_id_key", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key.a418c0a199": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eba_analytics_name_key", "model": "{{ get_where_subquery(ref('tflex_usage_dd_fct_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key.a418c0a199", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key"], "alias": "usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.6625762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_usage_dd_fct_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "eba_analytics_name_key", "file_key_name": "models.tflex_usage_dd_fct_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id.2587624799": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(agreement_id || '_' || user_login_id)", "model": "{{ get_where_subquery(ref('tflex_user_enrichment_dim_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id.2587624799", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id"], "alias": "usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.6711848, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_user_enrichment_dim_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.tflex_user_enrichment_dim_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id.2f5dcb9578": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "(agreement_id || '_' || user_login_id)", "model": "{{ get_where_subquery(ref('tflex_user_enrichment_dim_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id.2f5dcb9578", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id"], "alias": "usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.805677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_user_enrichment_dim_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.tflex_user_enrichment_dim_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id.379b1a7a38": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "agreement_id", "model": "{{ get_where_subquery(ref('tflex_user_enrichment_label_ref_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id.379b1a7a38", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id"], "alias": "usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.842222, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_user_enrichment_label_ref_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agreement_id", "file_key_name": "models.tflex_user_enrichment_label_ref_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id.553304d49c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "agreement_id", "model": "{{ get_where_subquery(ref('tflex_user_enrichment_label_ref_transform')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id.553304d49c", "fqn": ["shared_dbt_projects", "usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id"], "alias": "usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732174.844509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tflex_user_enrichment_label_ref_transform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agreement_id", "file_key_name": "models.tflex_user_enrichment_label_ref_transform", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.97eae0f3bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.97eae0f3bd", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.110107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.d4da299a2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "agree_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.d4da299a2d", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.111424, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agree_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.1d623ba81a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_login_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.1d623ba81a", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.11282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_login_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.92d864505a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.92d864505a", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.113743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.e1b3ec1387": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["CLOUD_CONSUMPTION", "PRODUCT_CONSUMPTION", "CLOUD_PRODUCT_CONSUMPTION", "MANUAL_CONSUMPTION", "MANUAL_ADJUSTMENT"], "column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.e1b3ec1387", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.1143959, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.c9702a91ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "machine_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.c9702a91ef", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.152139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "machine_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.24a3704feb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "license_server_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.24a3704feb", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.1534772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "license_server_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.08104c499d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_dt", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.08104c499d", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.154508, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_dt", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.e25c4d71de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_date_key", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.e25c4d71de", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.1596968, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_date_key", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.d6574fb9b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_line_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.d6574fb9b3", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.17051, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.4a48e44fda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_feature_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.4a48e44fda", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.232021, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_feature_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.bfdf188f53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.bfdf188f53", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4102101, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.0300a903c3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 4, 5], "column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.0300a903c3", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.411722, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.69e2393c51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_units_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.69e2393c51", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.424479, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_units_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.3a8793ce90": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "duration_mns", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.3a8793ce90", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.426002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "duration_mns", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.4ee0e68d4f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.4ee0e68d4f", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reason_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.6a9b66787e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.6a9b66787e", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4284601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.e25a157aa2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "agree_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.e25a157aa2", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4291148, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agree_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.436440f917": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_login_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.436440f917", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4297369, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_login_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.acd4a99b6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.acd4a99b6b", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4304261, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.ab95e21df8": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["CLOUD_CONSUMPTION", "PRODUCT_CONSUMPTION", "CLOUD_PRODUCT_CONSUMPTION", "MANUAL_CONSUMPTION", "MANUAL_ADJUSTMENT"], "column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.ab95e21df8", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.431062, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.189888e238": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "machine_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.189888e238", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.433311, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "machine_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.9aeede477c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "license_server_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.9aeede477c", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.433932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "license_server_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.f3d3288d84": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_dt", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.f3d3288d84", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.434856, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_dt", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.51ba643ea1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_date_key", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.51ba643ea1", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4358342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_date_key", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.0c0adfdeb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_feature_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.0c0adfdeb5", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.436486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_feature_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.4d454bec1b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.4d454bec1b", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4380338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.3dcba95607": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1, 2, 3, 4, 5, 6], "column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.3dcba95607", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4387012, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.b99df0386b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_units_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.b99df0386b", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.440639, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_units_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.061a802742": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "duration_mns", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.061a802742", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.44126, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "duration_mns", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.d2327f4c74": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_agg_product_usage_dd_expired')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.d2327f4c74", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd"], "alias": "usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4418728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reason_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.b92b571def": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.b92b571def", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4427588, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.53f95e153e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "agree_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.53f95e153e", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4433851, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "agree_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.4b70601426": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_dt", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_usage_dt", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.4b70601426", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_usage_dt"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_usage_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4441159, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_dt", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.111eb55bb1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_date_key", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.111eb55bb1", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.445199, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_date_key", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.2e267e5cca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_line_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.2e267e5cca", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.445868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.647c028333": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.647c028333", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.446538, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.a9ff3ad00f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["MANUAL_CONSUMPTION", "MANUAL_ADJUSTMENT"], "column_name": "txn_type_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.a9ff3ad00f", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm"], "alias": "usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.447192, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_type_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.a537024c33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.a537024c33", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.449126, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.0f002d6f22": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1, 2, 3, 4, 5], "column_name": "end_customer_agreement_yr_ind", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.0f002d6f22", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind"], "alias": "usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.449762, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_agreement_yr_ind", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.1d30bee650": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_units_nbr", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.1d30bee650", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.451509, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_units_nbr", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.dc4c7e0b5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "charged_item_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.dc4c7e0b5e", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.452139, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "charged_item_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.9424dd4771": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "src_created_dt", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.9424dd4771", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.452839, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "src_created_dt", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.f2c1d6a2bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_dt", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_txn_dt", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.f2c1d6a2bc", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_txn_dt"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_txn_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.456339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_dt", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.5235e6baac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "txn_qty", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_txn_qty", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.5235e6baac", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_txn_qty"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_txn_qty", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.45754, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "txn_qty", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.8236e7bf99": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_token_adjustments')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_token_adjustments_not_null_reason_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.8236e7bf99", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_token_adjustments_not_null_reason_cd"], "alias": "usage_tflex_t_eccr_token_adjustments_not_null_reason_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.460672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_token_adjustments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reason_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_cd.ff3451fbb6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_line_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_product_line')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_product_line_not_null_product_line_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_product_line_not_null_product_line_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_cd.ff3451fbb6", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_product_line_not_null_product_line_cd"], "alias": "usage_tflex_t_eccr_product_line_not_null_product_line_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.461545, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_product_line"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_nm.873208a782": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_line_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_product_line')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_product_line_not_null_product_line_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_product_line_not_null_product_line_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_nm.873208a782", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_product_line_not_null_product_line_nm"], "alias": "usage_tflex_t_eccr_product_line_not_null_product_line_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.464163, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_product_line"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_id.95f61a720c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_feature_id", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_pseb_product_feature')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_pseb_product_feature_not_null_product_feature_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_pseb_product_feature_not_null_product_feature_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_id.95f61a720c", "fqn": ["shared_dbt_projects", "usage_tflex_t_pseb_product_feature_not_null_product_feature_id"], "alias": "usage_tflex_t_pseb_product_feature_not_null_product_feature_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.464906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_pseb_product_feature"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_feature_id", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.638cc87644": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_feature_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_pseb_product_feature')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_pseb_product_feature_not_null_product_feature_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.638cc87644", "fqn": ["shared_dbt_projects", "usage_tflex_t_pseb_product_feature_not_null_product_feature_cd"], "alias": "usage_tflex_t_pseb_product_feature_not_null_product_feature_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4661381, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_pseb_product_feature"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_feature_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_release_cd.4a3c168d35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_release_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_pseb_product_feature')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_pseb_product_feature_not_null_product_release_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_pseb_product_feature_not_null_product_release_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_release_cd.4a3c168d35", "fqn": ["shared_dbt_projects", "usage_tflex_t_pseb_product_feature_not_null_product_release_cd"], "alias": "usage_tflex_t_pseb_product_feature_not_null_product_release_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.467233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_pseb_product_feature"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_release_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.645f271f12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "service_mktg_nm", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_service_nm')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.645f271f12", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm"], "alias": "usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.467963, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_service_nm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "service_mktg_nm", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_cd.fcaac05c4f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "service_cd", "model": "{{ get_where_subquery(source('token_flex_core_public', 't_eccr_service_nm')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_t_eccr_service_nm_not_null_service_cd", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_t_eccr_service_nm_not_null_service_cd.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_cd.fcaac05c4f", "fqn": ["shared_dbt_projects", "usage_tflex_t_eccr_service_nm_not_null_service_cd"], "alias": "usage_tflex_t_eccr_service_nm_not_null_service_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.468593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["token_flex_core_public", "t_eccr_service_nm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "service_cd", "file_key_name": "sources.token_flex_core_public", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.567a07bef4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_customer_contract_id", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_flexdetails')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.567a07bef4", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id"], "alias": "usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.473871, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_flexdetails"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_customer_contract_id", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.74d61c4a4d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "flexdetailid", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_flexdetails')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.74d61c4a4d", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid"], "alias": "usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.476197, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_flexdetails"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flexdetailid", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.bf7a24be4b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_exhibit_start_date", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_flexdetails')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.bf7a24be4b", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date"], "alias": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.47696, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_flexdetails"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_exhibit_start_date", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.54b55ef830": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_exhibit_end_date", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_flexdetails')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.54b55ef830", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date"], "alias": "usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4821, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_flexdetails"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contract_exhibit_end_date", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_flexdetailid.502b2e650d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "flexdetailid", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_flexdetailid", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_flexdetailid.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_flexdetailid.502b2e650d", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_flexdetailid"], "alias": "usage_tflex_flex_usage_not_null_flexdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.483669, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flexdetailid", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_username.9c3ea08b01": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "username", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_username", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_username.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_username.9c3ea08b01", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_username"], "alias": "usage_tflex_flex_usage_not_null_username", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.484349, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "username", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_hostname.36978520ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_hostname", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_user_hostname", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_user_hostname.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_hostname.36978520ca", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_user_hostname"], "alias": "usage_tflex_flex_usage_not_null_user_hostname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.491221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_hostname", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_project.219efa5b72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_project", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_user_project", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_user_project.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_project.219efa5b72", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_user_project"], "alias": "usage_tflex_flex_usage_not_null_user_project", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.4933498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "user_project", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_date_str.73f915fb04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_str", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_date_str", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_date_str.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_date_str.73f915fb04", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_date_str"], "alias": "usage_tflex_flex_usage_not_null_date_str", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.50064, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_str", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_productlinecode.4150e1c8b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productlinecode", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_productlinecode", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_productlinecode.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_productlinecode.4150e1c8b1", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_productlinecode"], "alias": "usage_tflex_flex_usage_not_null_productlinecode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.501386, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "productlinecode", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_hours_used.932c5c7b56": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hours_used", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flex_usage')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flex_usage_not_null_hours_used", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flex_usage_not_null_hours_used.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_hours_used.932c5c7b56", "fqn": ["shared_dbt_projects", "usage_tflex_flex_usage_not_null_hours_used"], "alias": "usage_tflex_flex_usage_not_null_hours_used", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.5025752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flex_usage"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hours_used", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.8377949198": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "flexdetailid", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_token_adjustment')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.8377949198", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid"], "alias": "usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.505009, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_token_adjustment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "flexdetailid", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.fc3acbde1e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "adjustment_date", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_token_adjustment')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.fc3acbde1e", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date"], "alias": "usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.50762, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_token_adjustment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "adjustment_date", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}, "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_use_count.a32c799b64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "use_count", "model": "{{ get_where_subquery(source('sales_data_hub_optimized', 'flexera_core_token_adjustment')) }}"}, "namespace": null}, "database": "EIO_INGEST", "schema": "dbt_test__audit", "name": "usage_tflex_flexera_core_token_adjustment_not_null_use_count", "resource_type": "test", "package_name": "shared_dbt_projects", "path": "usage_tflex_flexera_core_token_adjustment_not_null_use_count.sql", "original_file_path": "models/tflex_schema.yml", "unique_id": "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_use_count.a32c799b64", "fqn": ["shared_dbt_projects", "usage_tflex_flexera_core_token_adjustment_not_null_use_count"], "alias": "usage_tflex_flexera_core_token_adjustment_not_null_use_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["pre_source_validation"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1700732175.5083961, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_data_hub_optimized", "flexera_core_token_adjustment"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "use_count", "file_key_name": "sources.sales_data_hub_optimized", "attached_node": null}}, "sources": {"source.shared_dbt_projects.customer_success_shared.sfdc_tflex_account": {"database": "adp_workspaces", "schema": "customer_success_shared", "name": "sfdc_tflex_account", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.customer_success_shared.sfdc_tflex_account", "fqn": ["shared_dbt_projects", "customer_success_shared", "sfdc_tflex_account"], "source_name": "customer_success_shared", "source_description": "", "loader": "", "identifier": "sfdc_tflex_account", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_workspaces.customer_success_shared.sfdc_tflex_account", "created_at": 1700732175.10721}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_agg_product_usage_dd", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_agg_product_usage_dd"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_agg_product_usage_dd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "dt::timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"end_customer_agreement_id": {"name": "end_customer_agreement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agree_nbr": {"name": "agree_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_login_id": {"name": "user_login_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_type_nm": {"name": "txn_type_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "machine_nm": {"name": "machine_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "license_server_nm": {"name": "license_server_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_dt": {"name": "usage_dt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_date_key": {"name": "usage_date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_line_cd": {"name": "product_line_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_feature_id": {"name": "product_feature_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_customer_agreement_yr_ind": {"name": "end_customer_agreement_yr_ind", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_units_nbr": {"name": "txn_units_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_mns": {"name": "duration_mns", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_cd": {"name": "reason_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_agg_product_usage_dd", "created_at": 1700732175.427862}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_agg_product_usage_dd_expired", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_agg_product_usage_dd_expired"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_agg_product_usage_dd_expired", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"end_customer_agreement_id": {"name": "end_customer_agreement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agree_nbr": {"name": "agree_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_login_id": {"name": "user_login_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_type_nm": {"name": "txn_type_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "machine_nm": {"name": "machine_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "license_server_nm": {"name": "license_server_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_dt": {"name": "usage_dt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_date_key": {"name": "usage_date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_feature_id": {"name": "product_feature_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_customer_agreement_yr_ind": {"name": "end_customer_agreement_yr_ind", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_units_nbr": {"name": "txn_units_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "duration_mns": {"name": "duration_mns", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_cd": {"name": "reason_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_agg_product_usage_dd_expired", "created_at": 1700732175.442261}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_token_adjustments", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_token_adjustments"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_token_adjustments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "dt::timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"end_customer_agreement_id": {"name": "end_customer_agreement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agree_nbr": {"name": "agree_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_dt": {"name": "usage_dt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "usage_date_key": {"name": "usage_date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_line_cd": {"name": "product_line_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_type_nm": {"name": "txn_type_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_customer_agreement_yr_ind": {"name": "end_customer_agreement_yr_ind", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_units_nbr": {"name": "txn_units_nbr", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charged_item_id": {"name": "charged_item_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "src_created_dt": {"name": "src_created_dt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_dt": {"name": "txn_dt", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_qty": {"name": "txn_qty", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_cd": {"name": "reason_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_token_adjustments", "created_at": 1700732175.4611788}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_product_line", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_product_line"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_product_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"product_line_cd": {"name": "product_line_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_line_nm": {"name": "product_line_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_product_line", "created_at": 1700732175.464566}, "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_pseb_product_feature", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_pseb_product_feature"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_pseb_product_feature", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"product_feature_id": {"name": "product_feature_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_feature_cd": {"name": "product_feature_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_release_cd": {"name": "product_release_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_pseb_product_feature", "created_at": 1700732175.467625}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_service_nm", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_service_nm"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_service_nm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"service_mktg_nm": {"name": "service_mktg_nm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_cd": {"name": "service_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_service_nm", "created_at": 1700732175.4719858}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_user_enrichment_data", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_user_enrichment_data"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_user_enrichment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "dt::timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_user_enrichment_data", "created_at": 1700732175.472192}, "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data_labels": {"database": "adp_publish", "schema": "token_flex_core_public", "name": "t_eccr_user_enrichment_data_labels", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data_labels", "fqn": ["shared_dbt_projects", "token_flex_core_public", "t_eccr_user_enrichment_data_labels"], "source_name": "token_flex_core_public", "source_description": "", "loader": "", "identifier": "t_eccr_user_enrichment_data_labels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "dt::timestamp", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": 3, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.token_flex_core_public.t_eccr_user_enrichment_data_labels", "created_at": 1700732175.4723341}, "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails": {"database": "adp_publish", "schema": "sales_data_hub_optimized", "name": "flexera_core_flexdetails", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails", "fqn": ["shared_dbt_projects", "sales_data_hub_optimized", "flexera_core_flexdetails"], "source_name": "sales_data_hub_optimized", "source_description": "", "loader": "", "identifier": "flexera_core_flexdetails", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"end_customer_contract_id": {"name": "end_customer_contract_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flexdetailid": {"name": "flexdetailid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_exhibit_start_date": {"name": "contract_exhibit_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_exhibit_end_date": {"name": "contract_exhibit_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.sales_data_hub_optimized.flexera_core_flexdetails", "created_at": 1700732175.483257}, "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage": {"database": "adp_publish", "schema": "sales_data_hub_optimized", "name": "flex_usage", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage", "fqn": ["shared_dbt_projects", "sales_data_hub_optimized", "flex_usage"], "source_name": "sales_data_hub_optimized", "source_description": "", "loader": "", "identifier": "flex_usage", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"flexdetailid": {"name": "flexdetailid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_hostname": {"name": "user_hostname", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_project": {"name": "user_project", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_str": {"name": "date_str", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "productlinecode": {"name": "productlinecode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hours_used": {"name": "hours_used", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.sales_data_hub_optimized.flex_usage", "created_at": 1700732175.503357}, "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment": {"database": "adp_publish", "schema": "sales_data_hub_optimized", "name": "flexera_core_token_adjustment", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment", "fqn": ["shared_dbt_projects", "sales_data_hub_optimized", "flexera_core_token_adjustment"], "source_name": "sales_data_hub_optimized", "source_description": "", "loader": "", "identifier": "flexera_core_token_adjustment", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"flexdetailid": {"name": "flexdetailid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment_date": {"name": "adjustment_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "use_count": {"name": "use_count", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["pre_source_validation"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "adp_publish.sales_data_hub_optimized.flexera_core_token_adjustment", "created_at": 1700732175.50996}, "source.shared_dbt_projects.sfdc_shared.agreement_transaction__c": {"database": "bsd_publish", "schema": "sfdc_shared", "name": "agreement_transaction__c", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sfdc_shared.agreement_transaction__c", "fqn": ["shared_dbt_projects", "sfdc_shared", "agreement_transaction__c"], "source_name": "sfdc_shared", "source_description": "", "loader": "", "identifier": "agreement_transaction__c", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsd_publish.sfdc_shared.agreement_transaction__c", "created_at": 1700732175.510166}, "source.shared_dbt_projects.sfdc_shared.servicecontract": {"database": "bsd_publish", "schema": "sfdc_shared", "name": "servicecontract", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sfdc_shared.servicecontract", "fqn": ["shared_dbt_projects", "sfdc_shared", "servicecontract"], "source_name": "sfdc_shared", "source_description": "", "loader": "", "identifier": "servicecontract", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "bsd_publish.sfdc_shared.servicecontract", "created_at": 1700732175.5106182}, "source.shared_dbt_projects.purchase_shared.eba_contracts": {"database": "eio_publish", "schema": "purchase_shared", "name": "eba_contracts", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.purchase_shared.eba_contracts", "fqn": ["shared_dbt_projects", "purchase_shared", "eba_contracts"], "source_name": "purchase_shared", "source_description": "", "loader": "", "identifier": "eba_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "eio_publish.purchase_shared.eba_contracts", "created_at": 1700732175.5107589}, "source.shared_dbt_projects.sharepoint_common_files.full_product_list_full_product_list": {"database": "eio_ingest", "schema": "sharepoint_common_files", "name": "full_product_list_full_product_list", "resource_type": "source", "package_name": "shared_dbt_projects", "path": "models/tflex_schema.yml", "original_file_path": "models/tflex_schema.yml", "unique_id": "source.shared_dbt_projects.sharepoint_common_files.full_product_list_full_product_list", "fqn": ["shared_dbt_projects", "sharepoint_common_files", "full_product_list_full_product_list"], "source_name": "sharepoint_common_files", "source_description": "", "loader": "", "identifier": "full_product_list_full_product_list", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "eio_ingest.sharepoint_common_files.full_product_list_full_product_list", "created_at": 1700732175.5110369}}, "macros": {"macro.shared_dbt_projects.generate_pf_actuals_case_statements": {"name": "generate_pf_actuals_case_statements", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/generate_pf_actuals_case_statements.sql", "original_file_path": "macros/generate_pf_actuals_case_statements.sql", "unique_id": "macro.shared_dbt_projects.generate_pf_actuals_case_statements", "macro_sql": "{% macro generate_pf_actuals_case_statements(column_names, var) %}\n\n  {% for column in column_names %}\n    ,CASE WHEN LSTDESC_16.VALUE = 'IS Parent' THEN ipc.{{ column }} \n\n        ELSE IFNULL(actuals.{{ column }}, 0.00) END AS {{ column }}{% if not loop.last %}\n\n  {% endif %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.941788, "supported_languages": null}, "macro.shared_dbt_projects.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/get_tables_in_schema.sql", "original_file_path": "macros/get_tables_in_schema.sql", "unique_id": "macro.shared_dbt_projects.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\r\n    \r\n    {% set tables=dbt_utils.get_relations_by_pattern(\r\n        schema_pattern=schema_name,\r\n        database=database_name,\r\n        table_pattern=table_pattern,\r\n        exclude=exclude\r\n    ) %}\r\n\r\n\r\n    {% set table_list= tables | map(attribute='identifier') %}\r\n\r\n    {{ return(table_list | sort) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.956705, "supported_languages": null}, "macro.shared_dbt_projects.calculate_average": {"name": "calculate_average", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/calculate_average.sql", "original_file_path": "macros/calculate_average.sql", "unique_id": "macro.shared_dbt_projects.calculate_average", "macro_sql": "{% macro calculate_average(column_name) %}\n\n    avg({{ column_name }}) as average_value\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.956873, "supported_languages": null}, "macro.shared_dbt_projects.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/get_column_names.sql", "original_file_path": "macros/get_column_names.sql", "unique_id": "macro.shared_dbt_projects.get_column_names", "macro_sql": "{% macro get_column_names(location, file_format) %}\r\n{% if execute %}\r\n\t{% set query %}\r\n  \t\tSELECT listagg(expression || ' AS ' || COLUMN_NAME, ',') \r\n  \t\tFROM TABLE(\r\n    \t\tINFER_SCHEMA(\r\n      \t\tLOCATION=> '{{ location }}'\r\n      \t\t, FILE_FORMAT=> '{{ file_format }}'\r\n      \t\t)\r\n    \t\t)\r\n\t{% endset %}\r\n\r\n\t{% set result = run_query(query) %}\r\n\t{% set cols = result.rows[0][0] %}\r\n\r\n\t{{ cols }}\r\n\r\n{% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.9573162, "supported_languages": null}, "macro.shared_dbt_projects.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/generate_database_name.sql", "original_file_path": "macros/generate_database_name.sql", "unique_id": "macro.shared_dbt_projects.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%}\r\n\r\n        {{ default_database }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_database_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.9576051, "supported_languages": null}, "macro.shared_dbt_projects.generate_pf_forecast_case_statements": {"name": "generate_pf_forecast_case_statements", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/generate_pf_forecast_case_statements.sql", "original_file_path": "macros/generate_pf_forecast_case_statements.sql", "unique_id": "macro.shared_dbt_projects.generate_pf_forecast_case_statements", "macro_sql": "{% macro generate_pf_forecast_case_statements(column_names, var) %}\n\n  {% for column in column_names %}\n    ,CASE WHEN LSTDESC_16.VALUE = 'IS Parent' THEN ipc.{{ column }} \n\n        ELSE IFNULL(forecast.{{ column }}, 0.00) END AS {{ column }}{% if not loop.last %}\n\n  {% endif %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.957887, "supported_languages": null}, "macro.shared_dbt_projects.project": {"name": "project", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/tproject.sql", "original_file_path": "macros/tproject.sql", "unique_id": "macro.shared_dbt_projects.project", "macro_sql": "{% macro project() %}\nWITH JOINED_DATA as (\n    SELECT \n    UNIQUEID AS PROJECT_ID\n    FROM \n    EIO_PUBLISH.TENROX_PRIVATE.TPROJECT\n)\nSELECT \n*\nFROM JOINED_DATA\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.957983, "supported_languages": null}, "macro.shared_dbt_projects.external_stage": {"name": "external_stage", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/from_external_stage_materialization.sql", "original_file_path": "macros/from_external_stage_materialization.sql", "unique_id": "macro.shared_dbt_projects.external_stage", "macro_sql": "{% macro external_stage() %}\r\n    @__STAGE_TOKEN__\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.958997, "supported_languages": null}, "macro.shared_dbt_projects.ensure_external_stage": {"name": "ensure_external_stage", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/from_external_stage_materialization.sql", "original_file_path": "macros/from_external_stage_materialization.sql", "unique_id": "macro.shared_dbt_projects.ensure_external_stage", "macro_sql": "{% macro ensure_external_stage(stage_name, s3_url, file_format, temporary=False) %}\r\n    {{ log('Making external stage: ' ~ [stage_name, s3_url, file_format, temporary] | join(', ')) }}\r\n    create or replace stage {{ 'temporary' if temporary }} {{ stage_name }}\r\n\tSTORAGE_INTEGRATION = ADP_INGEST_GRN\r\n        url='{{ s3_url }}'\r\n        file_format = {{ file_format }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.959285, "supported_languages": null}, "macro.shared_dbt_projects.materialization_from_external_stage_snowflake": {"name": "materialization_from_external_stage_snowflake", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/from_external_stage_materialization.sql", "original_file_path": "macros/from_external_stage_materialization.sql", "unique_id": "macro.shared_dbt_projects.materialization_from_external_stage_snowflake", "macro_sql": "{% materialization from_external_stage, adapter='snowflake' -%}\r\n    {%- set identifier = model['alias'] -%}\r\n    {%- set stage_name = config.get('stage_name', default=identifier ~ '_stage') -%}\r\n    {%- set stage_url = config.require('stage_url') -%}\r\n    {%- set stage_file_format = config.get('stage_file_format', default='(type = PARQUET)') -%}\r\n    {%- call statement() -%}\r\n        {{ ensure_external_stage(stage_name, stage_url, stage_file_format, temporary=False) }}\r\n    {%- endcall -%}\r\n\r\n    {%- set old_relation = adapter.get_relation(database=database,schema=schema, identifier=identifier) -%}\r\n    {%- set target_relation = api.Relation.create(schema=schema, identifier=identifier, type='table') -%}\r\n\r\n    {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n    {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n    {%- set should_drop = (full_refresh_mode or not exists_as_table) -%}\r\n\r\n    -- setup\r\n    {% if old_relation is none -%}\r\n        -- noop\r\n    {%- elif should_drop -%}\r\n        {{ adapter.drop_relation(old_relation) }}\r\n        {%- set old_relation = none -%}\r\n    {%- endif %}\r\n\r\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n    -- `BEGIN` happens here:\r\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n    -- build model\r\n    {% if full_refresh_mode or old_relation is none -%}\r\n        {#\r\n            -- Create an empty table with columns as specified in sql.\r\n            -- We append a unique invocation_id to ensure no files are actually loaded, and an empty row set is returned,\r\n            -- which serves as a template to create the table.\r\n        #}\r\n        {%- call statement() -%}\r\n            CREATE OR REPLACE TABLE {{ target_relation }} AS (\r\n                {{ sql | replace('__STAGE_TOKEN__', stage_name ~ '/' ~ invocation_id) }}\r\n            )\r\n        {%- endcall -%}\r\n    {%- endif %}\r\n\r\n    {# Perform the main load operation using COPY INTO #}\r\n    {# See https://docs.snowflake.net/manuals/user-guide/data-load-considerations-load.html #}\r\n    {# See https://docs.snowflake.net/manuals/user-guide/data-load-transform.html #}\r\n    {%- call statement('main') -%}\r\n        {# TODO: Figure out how to deal with the ordering of columns changing in the model sql... #}\r\n        COPY INTO {{ target_relation }}\r\n        FROM (\r\n            {{ sql | replace('__STAGE_TOKEN__', stage_name)}}\r\n\t\r\n\t\t\r\n        )\r\n\tFILE_FORMAT=(TYPE=PARQUET)\r\n        on_error = CONTINUE\r\n    {% endcall %}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n    -- `COMMIT` happens here\r\n    {{ adapter.commit() }}\r\n\r\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n{{ return({'relations': [target_relation]}) }}\r\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.shared_dbt_projects.ensure_external_stage", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.979831, "supported_languages": ["sql"]}, "macro.shared_dbt_projects.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.shared_dbt_projects.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.980713, "supported_languages": null}, "macro.shared_dbt_projects.source_table_freshness": {"name": "source_table_freshness", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "macros/metrics_source_freshness.sql", "original_file_path": "macros/metrics_source_freshness.sql", "unique_id": "macro.shared_dbt_projects.source_table_freshness", "macro_sql": "{% macro source_table_freshness() %}\n-- this macro contains code to check the source freshness of all source tables\n    {{ log(\"macro: source_table_freshness\", True) }}\n\n    {{ log(\"macro: source_table_freshness - Fetching sources\", True) }}\n    {% call statement('kpi_source', fetch_result=True) %}\n        WITH kpi_status AS (\n            SELECT \n                LOWER(kpi) AS kpi,\n                PARSE_JSON(sources) AS sources\n            FROM {{ source('metrics_ingest', 'kpi_standardization_kpis_tracker_tracker')}}\n            WHERE sources IS NOT NULL\n        ),\n        exp_src AS (\n            SELECT\n                kpi || '-' || sources:source::string \n                || '-'|| sources:loaded_at::string as kpi_src\n            FROM kpi_status\n        )\n        SELECT *\n        FROM exp_src\n    {% endcall %}\n\n    {% set results = load_result('kpi_source')['data'] %}\n\n    {% for source in results %}\n        {% set kpi, src, load_at = source[0].split('-') %}\n\n        {%- call statement('get_max_load_dt', fetch_result=True) -%}\n            SELECT MAX({{ load_at }}) FROM {{src}}\n        {%- endcall -%}\n        {% set dt = load_result('get_max_load_dt')['data'][0] %}\n\n        {# convert 'yyyymmdd' date fromat to 'yyyy-mm-dd' fromat #}\n        {% set max_load_dt = dt[0] if dt[0] is not string else dt[0][:4]~'-'~dt[0][4:6]~'-'~dt[0][6:8] %}\n        {{ log(\"macro: source_table_freshness - src: \" ~ src ~\" load_at: \"~load_at~\" max_load_date: \" ~ max_load_dt, True) }}\n        \n        SELECT\n            TOP 1\n            'source_freshness' AS test_type,\n            LOWER('{{kpi}}') AS kpi_name,\n            '{{src}}' AS source,\n            TO_TIMESTAMP('{{max_load_dt}}') AS max_loaded_date,\n            CURRENT_DATE() AS dt\n        FROM {{ src }}\n            WHERE DATEDIFF('day', TO_TIMESTAMP('{{max_load_dt}}'), CURRENT_TIMESTAMP()) > 1\n        \n        {% if not loop.last %}\n            UNION ALL\n        {% endif %}\n\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.982804, "supported_languages": null}, "macro.shared_dbt_projects.test_date_format": {"name": "test_date_format", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "tests/generic/test_date_format.sql", "original_file_path": "tests/generic/test_date_format.sql", "unique_id": "macro.shared_dbt_projects.test_date_format", "macro_sql": "{% test date_format(model, column_name) %}\r\n\r\n\r\n\r\nSELECT COUNT(*) as cnt\r\nFROM {{ model }}\r\nWHERE NOT to_char({{ column_name }} , 'YYYY-MM-DD') <> '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'\r\nhaving cnt > 0\r\n\r\n\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.988299, "supported_languages": null}, "macro.shared_dbt_projects.test_not_less_than_zero": {"name": "test_not_less_than_zero", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "tests/generic/test_not_less_than_zero.sql", "original_file_path": "tests/generic/test_not_less_than_zero.sql", "unique_id": "macro.shared_dbt_projects.test_not_less_than_zero", "macro_sql": "{% test not_less_than_zero(model, column_name, ref_column) %}\n\n{{ config(severity = 'warn') }}\n\nwith validation as (\n    select\n        {{ ref_column }}\n        , {{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select *\n    from validation\n    where {{ column_name }} < 0\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.988607, "supported_languages": null}, "macro.shared_dbt_projects.test_not_greater_than_one": {"name": "test_not_greater_than_one", "resource_type": "macro", "package_name": "shared_dbt_projects", "path": "tests/generic/test_not_greater_than_one.sql", "original_file_path": "tests/generic/test_not_greater_than_one.sql", "unique_id": "macro.shared_dbt_projects.test_not_greater_than_one", "macro_sql": "{% test not_greater_than_one(model, column_name) %}\n\n    {{ config(severity = 'error') }}\n\n\n\n    WITH validation_errors as (\n        select *\n        from {{ model }}\n        where {{ column_name }} > 1\n    )\n\n    select *\n    from validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.988814, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.99631, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.997244, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        coalesce(table_type, 'DYNAMIC TABLE') as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.99799, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.9981482, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.998216, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.99839, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                    and upper(\"table_name\") = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732143.998841, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3152452, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.315496, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3160498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3304598, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.331411, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.332114, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.332375, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3325639, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.332808, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3332748, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.333527, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3336508, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.333995, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.334136, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.334481, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.335113, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.335283, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.335465, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.335704, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3357859, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.3362849, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.336551, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.6039948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.604274, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.6044722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.60463, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.658184, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.675413, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.675864, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.719445, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.7205288, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.720756, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732144.862956, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.031187, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.031378, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.0316741, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.118403, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.11939, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1195679, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.119914, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1201248, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.120335, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1205518, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.136014, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.136651, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1370811, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.137654, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1377668, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.138083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.138976, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.146015, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.151739, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.154144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.154363, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.157197, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.157593, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1600268, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1612601, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.1620831, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.163299, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.166595, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.168389, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.169148, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.231062, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.250725, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.2508469, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.3290381, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.5055869, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.506061, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.5065038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.5068061, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.507047, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.507367, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.5630121, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.600242, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.6076071, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.608047, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.6083431, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.609084, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.609667, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.610276, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.7228758, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.723707, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.925071, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.925405, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9255838, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.926104, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.926225, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.926355, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.927378, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.931703, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.940177, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.941118, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.941273, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.941355, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.941468, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9415538, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9417138, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9494212, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9550028, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.955323, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9557881, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9644868, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.968897, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.969277, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.969522, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.96981, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9700842, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.974826, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.975116, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9753, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.976831, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9773922, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9787982, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9829261, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.985488, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.987082, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.987503, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.987984, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.9881558, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732145.989391, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.484425, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.565543, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.565835, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.627111, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.665726, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.729713, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.730336, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.773748, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.7740228, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.774173, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.774389, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.7745311, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.774744, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.77488, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.775349, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.7754922, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.7756171, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.7758348, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.78447, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.794419, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.829994, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.8309162, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.8315399, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.9278982, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.928245, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.928858, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732146.929122, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.225491, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2280178, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.237151, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.239329, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.239866, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.244694, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2449138, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2450418, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.245152, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2452621, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.256632, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2567449, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.257112, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.257252, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.264906, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2655401, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.266582, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.267041, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.267246, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2674549, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.267753, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.267936, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2704158, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.2723541, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.272904, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.273311, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.273696, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.276001, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.276891, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.6748118, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.675084, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.799139, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.799381, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.8003058, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.800647, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.800802, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.8010209, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.8012989, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.801502, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732147.8018692, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.702215, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.705926, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.706135, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.706367, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7064588, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.709119, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.70925, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.709609, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7097201, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.709952, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.710067, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.711019, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.711185, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.711433, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7115562, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.711939, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7121122, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.727026, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.727374, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.728501, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.728829, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7397141, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.745311, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7461371, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.747293, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7479308, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7481868, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.748755, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.749206, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.749749, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7500522, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7516532, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7520242, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.761271, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.762054, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.763341, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.763784, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.shared_dbt_projects.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7641652, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.7645922, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.764705, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.76543, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.765548, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.767911, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.793629, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.794594, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.8018932, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.815124, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.848968, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.8491242, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.8492649, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.8859499, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.886314, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.886563, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732162.8867579, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0055292, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0152938, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0157812, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.016014, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0176861, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0203898, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.020979, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.021167, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.021364, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.021426, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.022021, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0224571, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.022631, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.022909, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0231621, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0329301, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.033967, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.034272, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0575, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.057895, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.058051, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.058625, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.058851, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.058933, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.059194, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.087349, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0876238, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.087702, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0879202, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.088039, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0882702, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0883799, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.088863, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0891688, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0894248, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.089548, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0897658, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0898712, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.0900621, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.090185, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.090369, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.090496, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.114534, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.115031, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.115835, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.12013, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.120746, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.135672, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.137093, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1372428, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1373792, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.137504, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1376262, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.137738, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.137859, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.138112, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.138232, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.138344, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1385589, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.13869, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.138816, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1389282, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.139162, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1393201, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.13952, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1399732, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.140778, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.141396, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.141927, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.151344, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.151584, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.151767, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.152019, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.152123, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1547, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1556852, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1567621, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1570392, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.1705909, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.170763, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.2304199, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.3636658, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.4517891, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.501562, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5019321, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.502157, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.502486, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.502645, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5078, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5079901, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.508707, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5088189, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5089438, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.509256, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.509397, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.509502, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.509619, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.509723, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.511358, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5114849, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5116532, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.512053, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.512235, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.51247, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5126028, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5127249, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.512905, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.575467, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.5757089, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.575826, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.625456, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.625806, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6260512, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6262379, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6605692, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.660676, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6608808, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.666882, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.668383, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.669783, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.670038, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.670646, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.671045, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.671492, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6718879, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6849222, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6857212, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.68588, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.686075, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6862478, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.687113, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.687573, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.6877382, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.687849, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.700384, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7005382, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7006998, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.700831, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.701046, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.701416, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.703746, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.705753, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.757806, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7581198, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7583911, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.758534, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.758681, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7588632, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.759021, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.7592509, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.759404, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.761903, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.917127, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.940358, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.941319, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732163.996812, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.013891, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.014039, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.014296, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.014465, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.028492, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.028736, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0296068, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.029871, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.030011, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0302742, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0304399, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0315678, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.032941, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.034783, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.037102, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0372338, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.054209, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.055402, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.057045, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.060353, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.06058, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.072654, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.072856, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.073071, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700732164.0741801, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.shared_dbt_projects.tflex_usage": ["source.shared_dbt_projects.purchase_shared.eba_contracts", "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage", "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails", "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment", "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd", "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired", "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line", "source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm", "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments", "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"], "model.shared_dbt_projects.my_python_model": ["model.shared_dbt_projects.tflex_usage"], "test.shared_dbt_projects.metrics_source_freshness_test": [], "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_unique_product_code.6a87bd9513": [], "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_not_null_product_code.b671cdaced": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id.3cb4b51c7a": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name.206cd29ca4": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_account_name.44457d8091": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_agreement_id.efafc2ce17": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id.840c1daa8a": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status.b2220c929e": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date.2344dbd8a2": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date.c130a00be6": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date.2825c88eda": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date.ae97a13d37": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform.d2ce6e2f3b": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform.ceff1dd3f4": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key.49adc34490": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key.a418c0a199": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id.2587624799": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id.2f5dcb9578": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id.379b1a7a38": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id.553304d49c": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.97eae0f3bd": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.d4da299a2d": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.1d623ba81a": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.92d864505a": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.e1b3ec1387": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.c9702a91ef": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.24a3704feb": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.08104c499d": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.e25c4d71de": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.d6574fb9b3": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.4a48e44fda": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.bfdf188f53": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.0300a903c3": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.69e2393c51": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.3a8793ce90": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.4ee0e68d4f": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.6a9b66787e": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.e25a157aa2": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.436440f917": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.acd4a99b6b": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.ab95e21df8": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.189888e238": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.9aeede477c": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.f3d3288d84": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.51ba643ea1": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.0c0adfdeb5": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.4d454bec1b": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.3dcba95607": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.b99df0386b": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.061a802742": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.d2327f4c74": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.b92b571def": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.53f95e153e": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.4b70601426": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.111eb55bb1": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.2e267e5cca": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.647c028333": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.a9ff3ad00f": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.a537024c33": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.0f002d6f22": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.1d30bee650": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.dc4c7e0b5e": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.9424dd4771": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.f2c1d6a2bc": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.5235e6baac": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.8236e7bf99": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments"], "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_cd.ff3451fbb6": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line"], "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_nm.873208a782": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line"], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_id.95f61a720c": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.638cc87644": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_release_cd.4a3c168d35": ["source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature"], "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.645f271f12": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm"], "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_cd.fcaac05c4f": ["source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm"], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.567a07bef4": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.74d61c4a4d": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.bf7a24be4b": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.54b55ef830": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_flexdetailid.502b2e650d": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_username.9c3ea08b01": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_hostname.36978520ca": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_project.219efa5b72": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_date_str.73f915fb04": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_productlinecode.4150e1c8b1": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_hours_used.932c5c7b56": ["source.shared_dbt_projects.sales_data_hub_optimized.flex_usage"], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.8377949198": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.fc3acbde1e": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_use_count.a32c799b64": ["source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment"], "source.shared_dbt_projects.customer_success_shared.sfdc_tflex_account": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line": [], "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data_labels": [], "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails": [], "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage": [], "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment": [], "source.shared_dbt_projects.sfdc_shared.agreement_transaction__c": [], "source.shared_dbt_projects.sfdc_shared.servicecontract": [], "source.shared_dbt_projects.purchase_shared.eba_contracts": [], "source.shared_dbt_projects.sharepoint_common_files.full_product_list_full_product_list": []}, "child_map": {"model.shared_dbt_projects.tflex_usage": ["model.shared_dbt_projects.my_python_model"], "model.shared_dbt_projects.my_python_model": [], "test.shared_dbt_projects.metrics_source_freshness_test": [], "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_unique_product_code.6a87bd9513": [], "test.shared_dbt_projects.usage_tflex_tflex_product_list_transform_not_null_product_code.b671cdaced": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_id.3cb4b51c7a": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_parent_eca_name.206cd29ca4": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_account_name.44457d8091": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_agreement_id.efafc2ce17": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_id.840c1daa8a": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_active_status.b2220c929e": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_start_date.2344dbd8a2": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_start_date.c130a00be6": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_exhibit_end_date.2825c88eda": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_validate_date_format_exhibit_end_date.ae97a13d37": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_ultimate_tflex_reporting_platform.d2ce6e2f3b": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_accepted_values_ultimate_tflex_reporting_platform.ceff1dd3f4": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_id_key.49adc34490": [], "test.shared_dbt_projects.usage_tflex_tflex_usage_dd_fct_not_null_eba_analytics_name_key.a418c0a199": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_unique_agreement_id_user_login_id.2587624799": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_dim_not_null_agreement_id_user_login_id.2f5dcb9578": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_unique_agreement_id.379b1a7a38": [], "test.shared_dbt_projects.usage_tflex_tflex_user_enrichment_label_ref_not_null_agreement_id.553304d49c": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.97eae0f3bd": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.d4da299a2d": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.1d623ba81a": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.92d864505a": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.e1b3ec1387": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.c9702a91ef": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.24a3704feb": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.08104c499d": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.e25c4d71de": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.d6574fb9b3": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.4a48e44fda": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.bfdf188f53": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.0300a903c3": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.69e2393c51": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.3a8793ce90": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.4ee0e68d4f": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.6a9b66787e": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.e25a157aa2": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.436440f917": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.acd4a99b6b": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.ab95e21df8": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.189888e238": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.9aeede477c": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.f3d3288d84": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.51ba643ea1": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.0c0adfdeb5": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.4d454bec1b": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.3dcba95607": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.b99df0386b": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.061a802742": [], "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.d2327f4c74": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.b92b571def": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.53f95e153e": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.4b70601426": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.111eb55bb1": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.2e267e5cca": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.647c028333": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.a9ff3ad00f": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.a537024c33": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.0f002d6f22": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.1d30bee650": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.dc4c7e0b5e": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.9424dd4771": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.f2c1d6a2bc": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.5235e6baac": [], "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.8236e7bf99": [], "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_cd.ff3451fbb6": [], "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_nm.873208a782": [], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_id.95f61a720c": [], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.638cc87644": [], "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_release_cd.4a3c168d35": [], "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.645f271f12": [], "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_cd.fcaac05c4f": [], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.567a07bef4": [], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.74d61c4a4d": [], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.bf7a24be4b": [], "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.54b55ef830": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_flexdetailid.502b2e650d": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_username.9c3ea08b01": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_hostname.36978520ca": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_project.219efa5b72": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_date_str.73f915fb04": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_productlinecode.4150e1c8b1": [], "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_hours_used.932c5c7b56": [], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.8377949198": [], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.fc3acbde1e": [], "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_use_count.a32c799b64": [], "source.shared_dbt_projects.customer_success_shared.sfdc_tflex_account": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_end_customer_agreement_yr_ind.0300a903c3", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_accepted_values_txn_type_nm.e1b3ec1387", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_agree_nbr.d4da299a2d", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_duration_mns.3a8793ce90", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_id.97eae0f3bd", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_end_customer_agreement_yr_ind.bfdf188f53", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_license_server_nm.24a3704feb", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_machine_nm.c9702a91ef", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_feature_id.4a48e44fda", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_product_line_cd.d6574fb9b3", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_reason_cd.4ee0e68d4f", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_type_nm.92d864505a", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_txn_units_nbr.69e2393c51", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_date_key.e25c4d71de", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_usage_dt.08104c499d", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_not_null_user_login_id.1d623ba81a"], "source.shared_dbt_projects.token_flex_core_public.t_eccr_agg_product_usage_dd_expired": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_end_customer_agreement_yr_ind.3dcba95607", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_accepted_values_txn_type_nm.ab95e21df8", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_agree_nbr.e25a157aa2", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_duration_mns.061a802742", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_id.6a9b66787e", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_end_customer_agreement_yr_ind.4d454bec1b", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_license_server_nm.9aeede477c", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_machine_nm.189888e238", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_product_feature_id.0c0adfdeb5", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_reason_cd.d2327f4c74", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_type_nm.acd4a99b6b", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_txn_units_nbr.b99df0386b", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_date_key.51ba643ea1", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_usage_dt.f3d3288d84", "test.shared_dbt_projects.usage_tflex_t_eccr_agg_product_usage_dd_exp_not_null_user_login_id.436440f917"], "source.shared_dbt_projects.token_flex_core_public.t_eccr_token_adjustments": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_end_customer_agreement_yr_ind.0f002d6f22", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_accepted_values_txn_type_nm.a9ff3ad00f", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_agree_nbr.53f95e153e", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_charged_item_id.dc4c7e0b5e", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_id.b92b571def", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_end_customer_agreement_yr_ind.a537024c33", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_product_line_cd.2e267e5cca", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_reason_cd.8236e7bf99", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_src_created_dt.9424dd4771", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_dt.f2c1d6a2bc", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_qty.5235e6baac", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_type_nm.647c028333", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_txn_units_nbr.1d30bee650", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_date_key.111eb55bb1", "test.shared_dbt_projects.usage_tflex_t_eccr_token_adjustments_not_null_usage_dt.4b70601426"], "source.shared_dbt_projects.token_flex_core_public.t_eccr_product_line": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_cd.ff3451fbb6", "test.shared_dbt_projects.usage_tflex_t_eccr_product_line_not_null_product_line_nm.873208a782"], "source.shared_dbt_projects.token_flex_core_public.t_pseb_product_feature": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_cd.638cc87644", "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_feature_id.95f61a720c", "test.shared_dbt_projects.usage_tflex_t_pseb_product_feature_not_null_product_release_cd.4a3c168d35"], "source.shared_dbt_projects.token_flex_core_public.t_eccr_service_nm": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_cd.fcaac05c4f", "test.shared_dbt_projects.usage_tflex_t_eccr_service_nm_not_null_service_mktg_nm.645f271f12"], "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data": [], "source.shared_dbt_projects.token_flex_core_public.t_eccr_user_enrichment_data_labels": [], "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_flexdetails": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_end_date.54b55ef830", "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_contract_exhibit_start_date.bf7a24be4b", "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_nm_not_null_flexdetailid.74d61c4a4d", "test.shared_dbt_projects.usage_tflex_flexera_core_flexdetails_not_null_end_customer_contract_id.567a07bef4"], "source.shared_dbt_projects.sales_data_hub_optimized.flex_usage": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_date_str.73f915fb04", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_flexdetailid.502b2e650d", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_hours_used.932c5c7b56", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_productlinecode.4150e1c8b1", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_hostname.36978520ca", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_user_project.219efa5b72", "test.shared_dbt_projects.usage_tflex_flex_usage_not_null_username.9c3ea08b01"], "source.shared_dbt_projects.sales_data_hub_optimized.flexera_core_token_adjustment": ["model.shared_dbt_projects.tflex_usage", "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_adjustment_date.fc3acbde1e", "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_flexdetailid.8377949198", "test.shared_dbt_projects.usage_tflex_flexera_core_token_adjustment_not_null_use_count.a32c799b64"], "source.shared_dbt_projects.sfdc_shared.agreement_transaction__c": [], "source.shared_dbt_projects.sfdc_shared.servicecontract": [], "source.shared_dbt_projects.purchase_shared.eba_contracts": ["model.shared_dbt_projects.tflex_usage"], "source.shared_dbt_projects.sharepoint_common_files.full_product_list_full_product_list": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}